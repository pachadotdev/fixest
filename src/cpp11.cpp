// Generated by cpp11: do not edit by hand
// clang-format off


#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// 01_01_convergence_helpers.cpp
list cpp_fixed_cost_gaussian(int n_i, int n_cells, SEXP index_i, SEXP index_j, SEXP order, SEXP invTableCluster_vector, SEXP dum_vector);
extern "C" SEXP _fixest_cpp_fixed_cost_gaussian(SEXP n_i, SEXP n_cells, SEXP index_i, SEXP index_j, SEXP order, SEXP invTableCluster_vector, SEXP dum_vector) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_fixed_cost_gaussian(cpp11::as_cpp<cpp11::decay_t<int>>(n_i), cpp11::as_cpp<cpp11::decay_t<int>>(n_cells), cpp11::as_cpp<cpp11::decay_t<SEXP>>(index_i), cpp11::as_cpp<cpp11::decay_t<SEXP>>(index_j), cpp11::as_cpp<cpp11::decay_t<SEXP>>(order), cpp11::as_cpp<cpp11::decay_t<SEXP>>(invTableCluster_vector), cpp11::as_cpp<cpp11::decay_t<SEXP>>(dum_vector)));
  END_CPP11
}
// 01_03_convergence_clusters.cpp
SEXP compute_cluster_coef_r(int family, int nb_coef, double theta, double diffMax_NR, SEXP r_mu, SEXP r_lhs, SEXP r_sum_y, SEXP r_dum, SEXP r_obsCluster, SEXP r_table, SEXP r_cumtable, int nthreads);
extern "C" SEXP _fixest_compute_cluster_coef_r(SEXP family, SEXP nb_coef, SEXP theta, SEXP diffMax_NR, SEXP r_mu, SEXP r_lhs, SEXP r_sum_y, SEXP r_dum, SEXP r_obsCluster, SEXP r_table, SEXP r_cumtable, SEXP nthreads) {
  BEGIN_CPP11
    return cpp11::as_sexp(compute_cluster_coef_r(cpp11::as_cpp<cpp11::decay_t<int>>(family), cpp11::as_cpp<cpp11::decay_t<int>>(nb_coef), cpp11::as_cpp<cpp11::decay_t<double>>(theta), cpp11::as_cpp<cpp11::decay_t<double>>(diffMax_NR), cpp11::as_cpp<cpp11::decay_t<SEXP>>(r_mu), cpp11::as_cpp<cpp11::decay_t<SEXP>>(r_lhs), cpp11::as_cpp<cpp11::decay_t<SEXP>>(r_sum_y), cpp11::as_cpp<cpp11::decay_t<SEXP>>(r_dum), cpp11::as_cpp<cpp11::decay_t<SEXP>>(r_obsCluster), cpp11::as_cpp<cpp11::decay_t<SEXP>>(r_table), cpp11::as_cpp<cpp11::decay_t<SEXP>>(r_cumtable), cpp11::as_cpp<cpp11::decay_t<int>>(nthreads)));
  END_CPP11
}
// 01_03_convergence_clusters.cpp
SEXP update_mu_single_cluster(int family, int nb_cluster, double theta, double diffMax_NR, SEXP mu_in, SEXP lhs, SEXP sum_y, SEXP dum, SEXP obsCluster, SEXP table, SEXP cumtable, int nthreads);
extern "C" SEXP _fixest_update_mu_single_cluster(SEXP family, SEXP nb_cluster, SEXP theta, SEXP diffMax_NR, SEXP mu_in, SEXP lhs, SEXP sum_y, SEXP dum, SEXP obsCluster, SEXP table, SEXP cumtable, SEXP nthreads) {
  BEGIN_CPP11
    return cpp11::as_sexp(update_mu_single_cluster(cpp11::as_cpp<cpp11::decay_t<int>>(family), cpp11::as_cpp<cpp11::decay_t<int>>(nb_cluster), cpp11::as_cpp<cpp11::decay_t<double>>(theta), cpp11::as_cpp<cpp11::decay_t<double>>(diffMax_NR), cpp11::as_cpp<cpp11::decay_t<SEXP>>(mu_in), cpp11::as_cpp<cpp11::decay_t<SEXP>>(lhs), cpp11::as_cpp<cpp11::decay_t<SEXP>>(sum_y), cpp11::as_cpp<cpp11::decay_t<SEXP>>(dum), cpp11::as_cpp<cpp11::decay_t<SEXP>>(obsCluster), cpp11::as_cpp<cpp11::decay_t<SEXP>>(table), cpp11::as_cpp<cpp11::decay_t<SEXP>>(cumtable), cpp11::as_cpp<cpp11::decay_t<int>>(nthreads)));
  END_CPP11
}
// 01_03_convergence_clusters.cpp
int get_n_cells(integers index_i, integers index_j);
extern "C" SEXP _fixest_get_n_cells(SEXP index_i, SEXP index_j) {
  BEGIN_CPP11
    return cpp11::as_sexp(get_n_cells(cpp11::as_cpp<cpp11::decay_t<integers>>(index_i), cpp11::as_cpp<cpp11::decay_t<integers>>(index_j)));
  END_CPP11
}
// 01_04_convergence_derivatives.cpp
list cpp_derivconv_seq_gnl(int iterMax, double diffMax, int n_vars, SEXP nb_cluster_all, SEXP ll_d2, SEXP jacob_vector, SEXP deriv_init_vector, SEXP dum_vector);
extern "C" SEXP _fixest_cpp_derivconv_seq_gnl(SEXP iterMax, SEXP diffMax, SEXP n_vars, SEXP nb_cluster_all, SEXP ll_d2, SEXP jacob_vector, SEXP deriv_init_vector, SEXP dum_vector) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_derivconv_seq_gnl(cpp11::as_cpp<cpp11::decay_t<int>>(iterMax), cpp11::as_cpp<cpp11::decay_t<double>>(diffMax), cpp11::as_cpp<cpp11::decay_t<int>>(n_vars), cpp11::as_cpp<cpp11::decay_t<SEXP>>(nb_cluster_all), cpp11::as_cpp<cpp11::decay_t<SEXP>>(ll_d2), cpp11::as_cpp<cpp11::decay_t<SEXP>>(jacob_vector), cpp11::as_cpp<cpp11::decay_t<SEXP>>(deriv_init_vector), cpp11::as_cpp<cpp11::decay_t<SEXP>>(dum_vector)));
  END_CPP11
}
// 01_04_convergence_derivatives.cpp
list cpp_derivconv_acc_gnl(int iterMax, double diffMax, int n_vars, SEXP nb_cluster_all, SEXP ll_d2, SEXP jacob_vector, SEXP deriv_init_vector, SEXP dum_vector);
extern "C" SEXP _fixest_cpp_derivconv_acc_gnl(SEXP iterMax, SEXP diffMax, SEXP n_vars, SEXP nb_cluster_all, SEXP ll_d2, SEXP jacob_vector, SEXP deriv_init_vector, SEXP dum_vector) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_derivconv_acc_gnl(cpp11::as_cpp<cpp11::decay_t<int>>(iterMax), cpp11::as_cpp<cpp11::decay_t<double>>(diffMax), cpp11::as_cpp<cpp11::decay_t<int>>(n_vars), cpp11::as_cpp<cpp11::decay_t<SEXP>>(nb_cluster_all), cpp11::as_cpp<cpp11::decay_t<SEXP>>(ll_d2), cpp11::as_cpp<cpp11::decay_t<SEXP>>(jacob_vector), cpp11::as_cpp<cpp11::decay_t<SEXP>>(deriv_init_vector), cpp11::as_cpp<cpp11::decay_t<SEXP>>(dum_vector)));
  END_CPP11
}
// 01_04_convergence_derivatives.cpp
list cpp_derivconv_acc_2(int iterMax, double diffMax, int n_vars, SEXP nb_cluster_all, int n_cells, SEXP index_i, SEXP index_j, SEXP ll_d2, SEXP order, SEXP jacob_vector, SEXP deriv_init_vector, SEXP dum_vector);
extern "C" SEXP _fixest_cpp_derivconv_acc_2(SEXP iterMax, SEXP diffMax, SEXP n_vars, SEXP nb_cluster_all, SEXP n_cells, SEXP index_i, SEXP index_j, SEXP ll_d2, SEXP order, SEXP jacob_vector, SEXP deriv_init_vector, SEXP dum_vector) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_derivconv_acc_2(cpp11::as_cpp<cpp11::decay_t<int>>(iterMax), cpp11::as_cpp<cpp11::decay_t<double>>(diffMax), cpp11::as_cpp<cpp11::decay_t<int>>(n_vars), cpp11::as_cpp<cpp11::decay_t<SEXP>>(nb_cluster_all), cpp11::as_cpp<cpp11::decay_t<int>>(n_cells), cpp11::as_cpp<cpp11::decay_t<SEXP>>(index_i), cpp11::as_cpp<cpp11::decay_t<SEXP>>(index_j), cpp11::as_cpp<cpp11::decay_t<SEXP>>(ll_d2), cpp11::as_cpp<cpp11::decay_t<SEXP>>(order), cpp11::as_cpp<cpp11::decay_t<SEXP>>(jacob_vector), cpp11::as_cpp<cpp11::decay_t<SEXP>>(deriv_init_vector), cpp11::as_cpp<cpp11::decay_t<SEXP>>(dum_vector)));
  END_CPP11
}
// 01_04_convergence_derivatives.cpp
list cpp_derivconv_seq_2(int iterMax, double diffMax, int n_vars, SEXP nb_cluster_all, int n_cells, SEXP index_i, SEXP index_j, SEXP order, SEXP ll_d2, SEXP jacob_vector, SEXP deriv_init_vector, SEXP dum_vector);
extern "C" SEXP _fixest_cpp_derivconv_seq_2(SEXP iterMax, SEXP diffMax, SEXP n_vars, SEXP nb_cluster_all, SEXP n_cells, SEXP index_i, SEXP index_j, SEXP order, SEXP ll_d2, SEXP jacob_vector, SEXP deriv_init_vector, SEXP dum_vector) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_derivconv_seq_2(cpp11::as_cpp<cpp11::decay_t<int>>(iterMax), cpp11::as_cpp<cpp11::decay_t<double>>(diffMax), cpp11::as_cpp<cpp11::decay_t<int>>(n_vars), cpp11::as_cpp<cpp11::decay_t<SEXP>>(nb_cluster_all), cpp11::as_cpp<cpp11::decay_t<int>>(n_cells), cpp11::as_cpp<cpp11::decay_t<SEXP>>(index_i), cpp11::as_cpp<cpp11::decay_t<SEXP>>(index_j), cpp11::as_cpp<cpp11::decay_t<SEXP>>(order), cpp11::as_cpp<cpp11::decay_t<SEXP>>(ll_d2), cpp11::as_cpp<cpp11::decay_t<SEXP>>(jacob_vector), cpp11::as_cpp<cpp11::decay_t<SEXP>>(deriv_init_vector), cpp11::as_cpp<cpp11::decay_t<SEXP>>(dum_vector)));
  END_CPP11
}
// 01_04_convergence_derivatives.cpp
doubles_matrix<> update_deriv_single(int n_vars, int nb_coef, SEXP r_ll_d2, SEXP r_jacob_vector, SEXP r_dum_vector);
extern "C" SEXP _fixest_update_deriv_single(SEXP n_vars, SEXP nb_coef, SEXP r_ll_d2, SEXP r_jacob_vector, SEXP r_dum_vector) {
  BEGIN_CPP11
    return cpp11::as_sexp(update_deriv_single(cpp11::as_cpp<cpp11::decay_t<int>>(n_vars), cpp11::as_cpp<cpp11::decay_t<int>>(nb_coef), cpp11::as_cpp<cpp11::decay_t<SEXP>>(r_ll_d2), cpp11::as_cpp<cpp11::decay_t<SEXP>>(r_jacob_vector), cpp11::as_cpp<cpp11::decay_t<SEXP>>(r_dum_vector)));
  END_CPP11
}
// 01_05_convergence.cpp
list cpp_conv_acc_gnl(int family, int iterMax, double diffMax, double diffMax_NR, double theta, SEXP nb_cluster_all, SEXP lhs, SEXP mu_init, SEXP dum_vector, SEXP tableCluster_vector, SEXP sum_y_vector, SEXP cumtable_vector, SEXP obsCluster_vector, int nthreads);
extern "C" SEXP _fixest_cpp_conv_acc_gnl(SEXP family, SEXP iterMax, SEXP diffMax, SEXP diffMax_NR, SEXP theta, SEXP nb_cluster_all, SEXP lhs, SEXP mu_init, SEXP dum_vector, SEXP tableCluster_vector, SEXP sum_y_vector, SEXP cumtable_vector, SEXP obsCluster_vector, SEXP nthreads) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_conv_acc_gnl(cpp11::as_cpp<cpp11::decay_t<int>>(family), cpp11::as_cpp<cpp11::decay_t<int>>(iterMax), cpp11::as_cpp<cpp11::decay_t<double>>(diffMax), cpp11::as_cpp<cpp11::decay_t<double>>(diffMax_NR), cpp11::as_cpp<cpp11::decay_t<double>>(theta), cpp11::as_cpp<cpp11::decay_t<SEXP>>(nb_cluster_all), cpp11::as_cpp<cpp11::decay_t<SEXP>>(lhs), cpp11::as_cpp<cpp11::decay_t<SEXP>>(mu_init), cpp11::as_cpp<cpp11::decay_t<SEXP>>(dum_vector), cpp11::as_cpp<cpp11::decay_t<SEXP>>(tableCluster_vector), cpp11::as_cpp<cpp11::decay_t<SEXP>>(sum_y_vector), cpp11::as_cpp<cpp11::decay_t<SEXP>>(cumtable_vector), cpp11::as_cpp<cpp11::decay_t<SEXP>>(obsCluster_vector), cpp11::as_cpp<cpp11::decay_t<int>>(nthreads)));
  END_CPP11
}
// 01_05_convergence.cpp
list cpp_conv_seq_gnl(int family, int iterMax, double diffMax, double diffMax_NR, double theta, SEXP nb_cluster_all, SEXP lhs, SEXP mu_init, SEXP dum_vector, SEXP tableCluster_vector, SEXP sum_y_vector, SEXP cumtable_vector, SEXP obsCluster_vector, int nthreads);
extern "C" SEXP _fixest_cpp_conv_seq_gnl(SEXP family, SEXP iterMax, SEXP diffMax, SEXP diffMax_NR, SEXP theta, SEXP nb_cluster_all, SEXP lhs, SEXP mu_init, SEXP dum_vector, SEXP tableCluster_vector, SEXP sum_y_vector, SEXP cumtable_vector, SEXP obsCluster_vector, SEXP nthreads) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_conv_seq_gnl(cpp11::as_cpp<cpp11::decay_t<int>>(family), cpp11::as_cpp<cpp11::decay_t<int>>(iterMax), cpp11::as_cpp<cpp11::decay_t<double>>(diffMax), cpp11::as_cpp<cpp11::decay_t<double>>(diffMax_NR), cpp11::as_cpp<cpp11::decay_t<double>>(theta), cpp11::as_cpp<cpp11::decay_t<SEXP>>(nb_cluster_all), cpp11::as_cpp<cpp11::decay_t<SEXP>>(lhs), cpp11::as_cpp<cpp11::decay_t<SEXP>>(mu_init), cpp11::as_cpp<cpp11::decay_t<SEXP>>(dum_vector), cpp11::as_cpp<cpp11::decay_t<SEXP>>(tableCluster_vector), cpp11::as_cpp<cpp11::decay_t<SEXP>>(sum_y_vector), cpp11::as_cpp<cpp11::decay_t<SEXP>>(cumtable_vector), cpp11::as_cpp<cpp11::decay_t<SEXP>>(obsCluster_vector), cpp11::as_cpp<cpp11::decay_t<int>>(nthreads)));
  END_CPP11
}
// 01_05_convergence.cpp
list cpp_conv_acc_poi_2(int n_i, int n_j, int n_cells, SEXP index_i, SEXP index_j, SEXP dum_vector, SEXP sum_y_vector, int iterMax, double diffMax, SEXP exp_mu_in, SEXP order);
extern "C" SEXP _fixest_cpp_conv_acc_poi_2(SEXP n_i, SEXP n_j, SEXP n_cells, SEXP index_i, SEXP index_j, SEXP dum_vector, SEXP sum_y_vector, SEXP iterMax, SEXP diffMax, SEXP exp_mu_in, SEXP order) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_conv_acc_poi_2(cpp11::as_cpp<cpp11::decay_t<int>>(n_i), cpp11::as_cpp<cpp11::decay_t<int>>(n_j), cpp11::as_cpp<cpp11::decay_t<int>>(n_cells), cpp11::as_cpp<cpp11::decay_t<SEXP>>(index_i), cpp11::as_cpp<cpp11::decay_t<SEXP>>(index_j), cpp11::as_cpp<cpp11::decay_t<SEXP>>(dum_vector), cpp11::as_cpp<cpp11::decay_t<SEXP>>(sum_y_vector), cpp11::as_cpp<cpp11::decay_t<int>>(iterMax), cpp11::as_cpp<cpp11::decay_t<double>>(diffMax), cpp11::as_cpp<cpp11::decay_t<SEXP>>(exp_mu_in), cpp11::as_cpp<cpp11::decay_t<SEXP>>(order)));
  END_CPP11
}
// 01_05_convergence.cpp
list cpp_conv_seq_poi_2(int n_i, int n_j, int n_cells, SEXP index_i, SEXP index_j, SEXP dum_vector, SEXP sum_y_vector, int iterMax, double diffMax, SEXP exp_mu_in, SEXP order);
extern "C" SEXP _fixest_cpp_conv_seq_poi_2(SEXP n_i, SEXP n_j, SEXP n_cells, SEXP index_i, SEXP index_j, SEXP dum_vector, SEXP sum_y_vector, SEXP iterMax, SEXP diffMax, SEXP exp_mu_in, SEXP order) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_conv_seq_poi_2(cpp11::as_cpp<cpp11::decay_t<int>>(n_i), cpp11::as_cpp<cpp11::decay_t<int>>(n_j), cpp11::as_cpp<cpp11::decay_t<int>>(n_cells), cpp11::as_cpp<cpp11::decay_t<SEXP>>(index_i), cpp11::as_cpp<cpp11::decay_t<SEXP>>(index_j), cpp11::as_cpp<cpp11::decay_t<SEXP>>(dum_vector), cpp11::as_cpp<cpp11::decay_t<SEXP>>(sum_y_vector), cpp11::as_cpp<cpp11::decay_t<int>>(iterMax), cpp11::as_cpp<cpp11::decay_t<double>>(diffMax), cpp11::as_cpp<cpp11::decay_t<SEXP>>(exp_mu_in), cpp11::as_cpp<cpp11::decay_t<SEXP>>(order)));
  END_CPP11
}
// 01_05_convergence.cpp
list cpp_conv_acc_gau_2(int n_i, int n_j, int n_cells, SEXP r_mat_row, SEXP r_mat_col, SEXP r_mat_value_Ab, SEXP r_mat_value_Ba, SEXP dum_vector, SEXP lhs, SEXP invTableCluster_vector, int iterMax, double diffMax, SEXP mu_in);
extern "C" SEXP _fixest_cpp_conv_acc_gau_2(SEXP n_i, SEXP n_j, SEXP n_cells, SEXP r_mat_row, SEXP r_mat_col, SEXP r_mat_value_Ab, SEXP r_mat_value_Ba, SEXP dum_vector, SEXP lhs, SEXP invTableCluster_vector, SEXP iterMax, SEXP diffMax, SEXP mu_in) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_conv_acc_gau_2(cpp11::as_cpp<cpp11::decay_t<int>>(n_i), cpp11::as_cpp<cpp11::decay_t<int>>(n_j), cpp11::as_cpp<cpp11::decay_t<int>>(n_cells), cpp11::as_cpp<cpp11::decay_t<SEXP>>(r_mat_row), cpp11::as_cpp<cpp11::decay_t<SEXP>>(r_mat_col), cpp11::as_cpp<cpp11::decay_t<SEXP>>(r_mat_value_Ab), cpp11::as_cpp<cpp11::decay_t<SEXP>>(r_mat_value_Ba), cpp11::as_cpp<cpp11::decay_t<SEXP>>(dum_vector), cpp11::as_cpp<cpp11::decay_t<SEXP>>(lhs), cpp11::as_cpp<cpp11::decay_t<SEXP>>(invTableCluster_vector), cpp11::as_cpp<cpp11::decay_t<int>>(iterMax), cpp11::as_cpp<cpp11::decay_t<double>>(diffMax), cpp11::as_cpp<cpp11::decay_t<SEXP>>(mu_in)));
  END_CPP11
}
// 01_05_convergence.cpp
list cpp_conv_seq_gau_2(int n_i, int n_j, int n_cells, SEXP r_mat_row, SEXP r_mat_col, SEXP r_mat_value_Ab, SEXP r_mat_value_Ba, SEXP dum_vector, SEXP lhs, SEXP invTableCluster_vector, int iterMax, double diffMax, SEXP mu_in);
extern "C" SEXP _fixest_cpp_conv_seq_gau_2(SEXP n_i, SEXP n_j, SEXP n_cells, SEXP r_mat_row, SEXP r_mat_col, SEXP r_mat_value_Ab, SEXP r_mat_value_Ba, SEXP dum_vector, SEXP lhs, SEXP invTableCluster_vector, SEXP iterMax, SEXP diffMax, SEXP mu_in) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_conv_seq_gau_2(cpp11::as_cpp<cpp11::decay_t<int>>(n_i), cpp11::as_cpp<cpp11::decay_t<int>>(n_j), cpp11::as_cpp<cpp11::decay_t<int>>(n_cells), cpp11::as_cpp<cpp11::decay_t<SEXP>>(r_mat_row), cpp11::as_cpp<cpp11::decay_t<SEXP>>(r_mat_col), cpp11::as_cpp<cpp11::decay_t<SEXP>>(r_mat_value_Ab), cpp11::as_cpp<cpp11::decay_t<SEXP>>(r_mat_value_Ba), cpp11::as_cpp<cpp11::decay_t<SEXP>>(dum_vector), cpp11::as_cpp<cpp11::decay_t<SEXP>>(lhs), cpp11::as_cpp<cpp11::decay_t<SEXP>>(invTableCluster_vector), cpp11::as_cpp<cpp11::decay_t<int>>(iterMax), cpp11::as_cpp<cpp11::decay_t<double>>(diffMax), cpp11::as_cpp<cpp11::decay_t<SEXP>>(mu_in)));
  END_CPP11
}
// 02_01_demeaning_helpers.cpp
list cpp_which_na_inf(SEXP x, int nthreads);
extern "C" SEXP _fixest_cpp_which_na_inf(SEXP x, SEXP nthreads) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_which_na_inf(cpp11::as_cpp<cpp11::decay_t<SEXP>>(x), cpp11::as_cpp<cpp11::decay_t<int>>(nthreads)));
  END_CPP11
}
// 02_04_demeaning.cpp
list cpp_demean(SEXP y, SEXP X_raw, SEXP r_weights, int iterMax, double diffMax, SEXP r_nb_id_Q, SEXP fe_id_list, SEXP table_id_I, SEXP slope_flag_Q, SEXP slope_vars_list, SEXP r_init, int nthreads, bool save_fixef);
extern "C" SEXP _fixest_cpp_demean(SEXP y, SEXP X_raw, SEXP r_weights, SEXP iterMax, SEXP diffMax, SEXP r_nb_id_Q, SEXP fe_id_list, SEXP table_id_I, SEXP slope_flag_Q, SEXP slope_vars_list, SEXP r_init, SEXP nthreads, SEXP save_fixef) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_demean(cpp11::as_cpp<cpp11::decay_t<SEXP>>(y), cpp11::as_cpp<cpp11::decay_t<SEXP>>(X_raw), cpp11::as_cpp<cpp11::decay_t<SEXP>>(r_weights), cpp11::as_cpp<cpp11::decay_t<int>>(iterMax), cpp11::as_cpp<cpp11::decay_t<double>>(diffMax), cpp11::as_cpp<cpp11::decay_t<SEXP>>(r_nb_id_Q), cpp11::as_cpp<cpp11::decay_t<SEXP>>(fe_id_list), cpp11::as_cpp<cpp11::decay_t<SEXP>>(table_id_I), cpp11::as_cpp<cpp11::decay_t<SEXP>>(slope_flag_Q), cpp11::as_cpp<cpp11::decay_t<SEXP>>(slope_vars_list), cpp11::as_cpp<cpp11::decay_t<SEXP>>(r_init), cpp11::as_cpp<cpp11::decay_t<int>>(nthreads), cpp11::as_cpp<cpp11::decay_t<bool>>(save_fixef)));
  END_CPP11
}
// 03_01_dot_square_bracket.cpp
list cpp_dsb(SEXP Rstr);
extern "C" SEXP _fixest_cpp_dsb(SEXP Rstr) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_dsb(cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rstr)));
  END_CPP11
}
// 03_01_dot_square_bracket.cpp
list cpp_dsb_full_string(SEXP Rstr);
extern "C" SEXP _fixest_cpp_dsb_full_string(SEXP Rstr) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_dsb_full_string(cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rstr)));
  END_CPP11
}
// 03_01_dot_square_bracket.cpp
list cpp_dsb_if_extract(SEXP Rstr);
extern "C" SEXP _fixest_cpp_dsb_if_extract(SEXP Rstr) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_dsb_if_extract(cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rstr)));
  END_CPP11
}
// 03_01_dot_square_bracket.cpp
strings cpp_paste_conditional(strings x, integers id, int n);
extern "C" SEXP _fixest_cpp_paste_conditional(SEXP x, SEXP id, SEXP n) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_paste_conditional(cpp11::as_cpp<cpp11::decay_t<strings>>(x), cpp11::as_cpp<cpp11::decay_t<integers>>(id), cpp11::as_cpp<cpp11::decay_t<int>>(n)));
  END_CPP11
}
// 04_02_linear_model_cholesky.cpp
list cpp_cholesky(doubles_matrix<> X, double tol, int nthreads);
extern "C" SEXP _fixest_cpp_cholesky(SEXP X, SEXP tol, SEXP nthreads) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_cholesky(cpp11::as_cpp<cpp11::decay_t<doubles_matrix<>>>(X), cpp11::as_cpp<cpp11::decay_t<double>>(tol), cpp11::as_cpp<cpp11::decay_t<int>>(nthreads)));
  END_CPP11
}
// 04_03_linear_model_mmult.cpp
list cpp_sparse_products(doubles_matrix<> X, doubles w, SEXP y, bool correct_0w, int nthreads);
extern "C" SEXP _fixest_cpp_sparse_products(SEXP X, SEXP w, SEXP y, SEXP correct_0w, SEXP nthreads) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_sparse_products(cpp11::as_cpp<cpp11::decay_t<doubles_matrix<>>>(X), cpp11::as_cpp<cpp11::decay_t<doubles>>(w), cpp11::as_cpp<cpp11::decay_t<SEXP>>(y), cpp11::as_cpp<cpp11::decay_t<bool>>(correct_0w), cpp11::as_cpp<cpp11::decay_t<int>>(nthreads)));
  END_CPP11
}
// 04_03_linear_model_mmult.cpp
doubles_matrix<> cpppar_crossprod(doubles_matrix<> X, doubles w, int nthreads);
extern "C" SEXP _fixest_cpppar_crossprod(SEXP X, SEXP w, SEXP nthreads) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpppar_crossprod(cpp11::as_cpp<cpp11::decay_t<doubles_matrix<>>>(X), cpp11::as_cpp<cpp11::decay_t<doubles>>(w), cpp11::as_cpp<cpp11::decay_t<int>>(nthreads)));
  END_CPP11
}
// 04_03_linear_model_mmult.cpp
doubles_matrix<> cpp_mat_reconstruct(writable::doubles_matrix<> X, logicals id_excl);
extern "C" SEXP _fixest_cpp_mat_reconstruct(SEXP X, SEXP id_excl) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_mat_reconstruct(cpp11::as_cpp<cpp11::decay_t<writable::doubles_matrix<>>>(X), cpp11::as_cpp<cpp11::decay_t<logicals>>(id_excl)));
  END_CPP11
}
// 04_04_linear_model_ivs.cpp
list cpp_iv_products(doubles_matrix<> X, SEXP y, doubles_matrix<> Z, SEXP u, doubles w, int nthreads);
extern "C" SEXP _fixest_cpp_iv_products(SEXP X, SEXP y, SEXP Z, SEXP u, SEXP w, SEXP nthreads) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_iv_products(cpp11::as_cpp<cpp11::decay_t<doubles_matrix<>>>(X), cpp11::as_cpp<cpp11::decay_t<SEXP>>(y), cpp11::as_cpp<cpp11::decay_t<doubles_matrix<>>>(Z), cpp11::as_cpp<cpp11::decay_t<SEXP>>(u), cpp11::as_cpp<cpp11::decay_t<doubles>>(w), cpp11::as_cpp<cpp11::decay_t<int>>(nthreads)));
  END_CPP11
}
// 04_04_linear_model_ivs.cpp
list cpp_iv_product_completion(doubles_matrix<> XtX, doubles Xty, doubles_matrix<> X, doubles y, doubles_matrix<> U, doubles w, int nthreads);
extern "C" SEXP _fixest_cpp_iv_product_completion(SEXP XtX, SEXP Xty, SEXP X, SEXP y, SEXP U, SEXP w, SEXP nthreads) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_iv_product_completion(cpp11::as_cpp<cpp11::decay_t<doubles_matrix<>>>(XtX), cpp11::as_cpp<cpp11::decay_t<doubles>>(Xty), cpp11::as_cpp<cpp11::decay_t<doubles_matrix<>>>(X), cpp11::as_cpp<cpp11::decay_t<doubles>>(y), cpp11::as_cpp<cpp11::decay_t<doubles_matrix<>>>(U), cpp11::as_cpp<cpp11::decay_t<doubles>>(w), cpp11::as_cpp<cpp11::decay_t<int>>(nthreads)));
  END_CPP11
}
// 04_04_linear_model_ivs.cpp
doubles cpp_iv_resid(doubles resid_2nd, doubles coef, SEXP resid_1st, bool is_int, int nthreads);
extern "C" SEXP _fixest_cpp_iv_resid(SEXP resid_2nd, SEXP coef, SEXP resid_1st, SEXP is_int, SEXP nthreads) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_iv_resid(cpp11::as_cpp<cpp11::decay_t<doubles>>(resid_2nd), cpp11::as_cpp<cpp11::decay_t<doubles>>(coef), cpp11::as_cpp<cpp11::decay_t<SEXP>>(resid_1st), cpp11::as_cpp<cpp11::decay_t<bool>>(is_int), cpp11::as_cpp<cpp11::decay_t<int>>(nthreads)));
  END_CPP11
}
// 05_01_misc_helpers.cpp
std::string cpp_add_commas(double x, int r, bool whole);
extern "C" SEXP _fixest_cpp_add_commas(SEXP x, SEXP r, SEXP whole) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_add_commas(cpp11::as_cpp<cpp11::decay_t<double>>(x), cpp11::as_cpp<cpp11::decay_t<int>>(r), cpp11::as_cpp<cpp11::decay_t<bool>>(whole)));
  END_CPP11
}
// 05_01_misc_helpers.cpp
list cpp_find_never_always_treated(integers cohort, doubles period);
extern "C" SEXP _fixest_cpp_find_never_always_treated(SEXP cohort, SEXP period) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_find_never_always_treated(cpp11::as_cpp<cpp11::decay_t<integers>>(cohort), cpp11::as_cpp<cpp11::decay_t<doubles>>(period)));
  END_CPP11
}
// 05_01_misc_helpers.cpp
integers cpp_get_first_item(integers x, int n_items);
extern "C" SEXP _fixest_cpp_get_first_item(SEXP x, SEXP n_items) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_get_first_item(cpp11::as_cpp<cpp11::decay_t<integers>>(x), cpp11::as_cpp<cpp11::decay_t<int>>(n_items)));
  END_CPP11
}
// 05_01_misc_helpers.cpp
integers cpp_combine_clusters(SEXP cluster_list, integers index);
extern "C" SEXP _fixest_cpp_combine_clusters(SEXP cluster_list, SEXP index) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_combine_clusters(cpp11::as_cpp<cpp11::decay_t<SEXP>>(cluster_list), cpp11::as_cpp<cpp11::decay_t<integers>>(index)));
  END_CPP11
}
// 05_01_misc_helpers.cpp
list cpp_cut(doubles x_sorted, doubles cut_points, integers is_included);
extern "C" SEXP _fixest_cpp_cut(SEXP x_sorted, SEXP cut_points, SEXP is_included) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_cut(cpp11::as_cpp<cpp11::decay_t<doubles>>(x_sorted), cpp11::as_cpp<cpp11::decay_t<doubles>>(cut_points), cpp11::as_cpp<cpp11::decay_t<integers>>(is_included)));
  END_CPP11
}
// 05_01_misc_helpers.cpp
bool cpp_is_int(SEXP x);
extern "C" SEXP _fixest_cpp_is_int(SEXP x) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_is_int(cpp11::as_cpp<cpp11::decay_t<SEXP>>(x)));
  END_CPP11
}
// 05_01_misc_helpers.cpp
double cpp_hash_string(std::string x);
extern "C" SEXP _fixest_cpp_hash_string(SEXP x) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_hash_string(cpp11::as_cpp<cpp11::decay_t<std::string>>(x)));
  END_CPP11
}
// 05_01_misc_helpers.cpp
bool cpp_isConstant(doubles x);
extern "C" SEXP _fixest_cpp_isConstant(SEXP x) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_isConstant(cpp11::as_cpp<cpp11::decay_t<doubles>>(x)));
  END_CPP11
}
// 05_01_misc_helpers.cpp
bool cpp_any_na_null(SEXP x);
extern "C" SEXP _fixest_cpp_any_na_null(SEXP x) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_any_na_null(cpp11::as_cpp<cpp11::decay_t<SEXP>>(x)));
  END_CPP11
}
// 05_01_misc_helpers.cpp
list cpp_find_duplicates(integers id, integers time);
extern "C" SEXP _fixest_cpp_find_duplicates(SEXP id, SEXP time) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_find_duplicates(cpp11::as_cpp<cpp11::decay_t<integers>>(id), cpp11::as_cpp<cpp11::decay_t<integers>>(time)));
  END_CPP11
}
// 05_01_misc_helpers.cpp
integers cpp_check_nested(SEXP fe_list, SEXP cluster_list, integers fe_sizes, int n);
extern "C" SEXP _fixest_cpp_check_nested(SEXP fe_list, SEXP cluster_list, SEXP fe_sizes, SEXP n) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_check_nested(cpp11::as_cpp<cpp11::decay_t<SEXP>>(fe_list), cpp11::as_cpp<cpp11::decay_t<SEXP>>(cluster_list), cpp11::as_cpp<cpp11::decay_t<integers>>(fe_sizes), cpp11::as_cpp<cpp11::decay_t<int>>(n)));
  END_CPP11
}
// 05_01_misc_helpers.cpp
int cpp_pgcd(integers x);
extern "C" SEXP _fixest_cpp_pgcd(SEXP x) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_pgcd(cpp11::as_cpp<cpp11::decay_t<integers>>(x)));
  END_CPP11
}
// 05_02_misc_linalg.cpp
doubles_matrix<> cpp_factor_matrix(integers fact, logicals is_na_all, integers who_is_dropped, SEXP var, strings col_names);
extern "C" SEXP _fixest_cpp_factor_matrix(SEXP fact, SEXP is_na_all, SEXP who_is_dropped, SEXP var, SEXP col_names) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_factor_matrix(cpp11::as_cpp<cpp11::decay_t<integers>>(fact), cpp11::as_cpp<cpp11::decay_t<logicals>>(is_na_all), cpp11::as_cpp<cpp11::decay_t<integers>>(who_is_dropped), cpp11::as_cpp<cpp11::decay_t<SEXP>>(var), cpp11::as_cpp<cpp11::decay_t<strings>>(col_names)));
  END_CPP11
}
// 05_02_misc_linalg.cpp
doubles cpp_diag_XUtX(doubles_matrix<> X, doubles_matrix<> U);
extern "C" SEXP _fixest_cpp_diag_XUtX(SEXP X, SEXP U) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_diag_XUtX(cpp11::as_cpp<cpp11::decay_t<doubles_matrix<>>>(X), cpp11::as_cpp<cpp11::decay_t<doubles_matrix<>>>(U)));
  END_CPP11
}
// 05_03_misc_exp_family.cpp
doubles cpp_lgamma(doubles x);
extern "C" SEXP _fixest_cpp_lgamma(SEXP x) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_lgamma(cpp11::as_cpp<cpp11::decay_t<doubles>>(x)));
  END_CPP11
}
// 05_03_misc_exp_family.cpp
doubles cpp_log_a_exp(double a, doubles mu, doubles exp_mu);
extern "C" SEXP _fixest_cpp_log_a_exp(SEXP a, SEXP mu, SEXP exp_mu) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_log_a_exp(cpp11::as_cpp<cpp11::decay_t<double>>(a), cpp11::as_cpp<cpp11::decay_t<doubles>>(mu), cpp11::as_cpp<cpp11::decay_t<doubles>>(exp_mu)));
  END_CPP11
}
// 05_04_misc_derivatives.cpp
doubles cpp_partialDerivative_other(int iterMax, int Q, int N, double epsDeriv, doubles ll_d2, doubles dx_dother, doubles init, integers_matrix<> dumMat, integers nbCluster);
extern "C" SEXP _fixest_cpp_partialDerivative_other(SEXP iterMax, SEXP Q, SEXP N, SEXP epsDeriv, SEXP ll_d2, SEXP dx_dother, SEXP init, SEXP dumMat, SEXP nbCluster) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_partialDerivative_other(cpp11::as_cpp<cpp11::decay_t<int>>(iterMax), cpp11::as_cpp<cpp11::decay_t<int>>(Q), cpp11::as_cpp<cpp11::decay_t<int>>(N), cpp11::as_cpp<cpp11::decay_t<double>>(epsDeriv), cpp11::as_cpp<cpp11::decay_t<doubles>>(ll_d2), cpp11::as_cpp<cpp11::decay_t<doubles>>(dx_dother), cpp11::as_cpp<cpp11::decay_t<doubles>>(init), cpp11::as_cpp<cpp11::decay_t<integers_matrix<>>>(dumMat), cpp11::as_cpp<cpp11::decay_t<integers>>(nbCluster)));
  END_CPP11
}
// 05_05_misc_tables.cpp
doubles cpp_table(int Q, integers dum);
extern "C" SEXP _fixest_cpp_table(SEXP Q, SEXP dum) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_table(cpp11::as_cpp<cpp11::decay_t<int>>(Q), cpp11::as_cpp<cpp11::decay_t<integers>>(dum)));
  END_CPP11
}
// 05_05_misc_tables.cpp
double cpp_ssr_null(doubles y, doubles w);
extern "C" SEXP _fixest_cpp_ssr_null(SEXP y, SEXP w) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_ssr_null(cpp11::as_cpp<cpp11::decay_t<doubles>>(y), cpp11::as_cpp<cpp11::decay_t<doubles>>(w)));
  END_CPP11
}
// 05_05_misc_tables.cpp
double cpp_ssq(doubles x, doubles w);
extern "C" SEXP _fixest_cpp_ssq(SEXP x, SEXP w) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_ssq(cpp11::as_cpp<cpp11::decay_t<doubles>>(x), cpp11::as_cpp<cpp11::decay_t<doubles>>(w)));
  END_CPP11
}
// 05_05_misc_tables.cpp
int cpp_constant_dum(int k, doubles x, integers dum, bool only_0);
extern "C" SEXP _fixest_cpp_constant_dum(SEXP k, SEXP x, SEXP dum, SEXP only_0) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_constant_dum(cpp11::as_cpp<cpp11::decay_t<int>>(k), cpp11::as_cpp<cpp11::decay_t<doubles>>(x), cpp11::as_cpp<cpp11::decay_t<integers>>(dum), cpp11::as_cpp<cpp11::decay_t<bool>>(only_0)));
  END_CPP11
}
// 05_06_misc_tapplies.cpp
doubles_matrix<> cpp_tapply_sum(int Q, doubles_matrix<> x, integers dum);
extern "C" SEXP _fixest_cpp_tapply_sum(SEXP Q, SEXP x, SEXP dum) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_tapply_sum(cpp11::as_cpp<cpp11::decay_t<int>>(Q), cpp11::as_cpp<cpp11::decay_t<doubles_matrix<>>>(x), cpp11::as_cpp<cpp11::decay_t<integers>>(dum)));
  END_CPP11
}
// 05_06_misc_tapplies.cpp
doubles cpp_tapply_vsum(int Q, doubles x, integers dum);
extern "C" SEXP _fixest_cpp_tapply_vsum(SEXP Q, SEXP x, SEXP dum) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_tapply_vsum(cpp11::as_cpp<cpp11::decay_t<int>>(Q), cpp11::as_cpp<cpp11::decay_t<doubles>>(x), cpp11::as_cpp<cpp11::decay_t<integers>>(dum)));
  END_CPP11
}
// 05_07_misc_lag.cpp
integers cpp_lag_obs(integers id, integers time, int nlag);
extern "C" SEXP _fixest_cpp_lag_obs(SEXP id, SEXP time, SEXP nlag) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_lag_obs(cpp11::as_cpp<cpp11::decay_t<integers>>(id), cpp11::as_cpp<cpp11::decay_t<integers>>(time), cpp11::as_cpp<cpp11::decay_t<int>>(nlag)));
  END_CPP11
}
// 06_01_quf_helpers.cpp
list cpp_quf_gnl(SEXP x);
extern "C" SEXP _fixest_cpp_quf_gnl(SEXP x) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_quf_gnl(cpp11::as_cpp<cpp11::decay_t<SEXP>>(x)));
  END_CPP11
}
// 06_03_quf_tables.cpp
writable::list cpppar_quf_table_sum(SEXP x, SEXP y, bool do_sum_y, bool rm_0, bool rm_1, bool rm_single, writable::integer only_slope, int nthreads, bool do_refactor, SEXP r_x_sizes, writable::integer obs2keep);
extern "C" SEXP _fixest_cpppar_quf_table_sum(SEXP x, SEXP y, SEXP do_sum_y, SEXP rm_0, SEXP rm_1, SEXP rm_single, SEXP only_slope, SEXP nthreads, SEXP do_refactor, SEXP r_x_sizes, SEXP obs2keep) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpppar_quf_table_sum(cpp11::as_cpp<cpp11::decay_t<SEXP>>(x), cpp11::as_cpp<cpp11::decay_t<SEXP>>(y), cpp11::as_cpp<cpp11::decay_t<bool>>(do_sum_y), cpp11::as_cpp<cpp11::decay_t<bool>>(rm_0), cpp11::as_cpp<cpp11::decay_t<bool>>(rm_1), cpp11::as_cpp<cpp11::decay_t<bool>>(rm_single), cpp11::as_cpp<cpp11::decay_t<writable::integer>>(only_slope), cpp11::as_cpp<cpp11::decay_t<int>>(nthreads), cpp11::as_cpp<cpp11::decay_t<bool>>(do_refactor), cpp11::as_cpp<cpp11::decay_t<SEXP>>(r_x_sizes), cpp11::as_cpp<cpp11::decay_t<writable::integer>>(obs2keep)));
  END_CPP11
}
// 07_01_parallel_helpers.cpp
list cpppar_which_na_inf_vec(SEXP x, int nthreads);
extern "C" SEXP _fixest_cpppar_which_na_inf_vec(SEXP x, SEXP nthreads) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpppar_which_na_inf_vec(cpp11::as_cpp<cpp11::decay_t<SEXP>>(x), cpp11::as_cpp<cpp11::decay_t<int>>(nthreads)));
  END_CPP11
}
// 07_01_parallel_helpers.cpp
list cpppar_which_na_inf_mat(doubles_matrix<> mat, int nthreads);
extern "C" SEXP _fixest_cpppar_which_na_inf_mat(SEXP mat, SEXP nthreads) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpppar_which_na_inf_mat(cpp11::as_cpp<cpp11::decay_t<doubles_matrix<>>>(mat), cpp11::as_cpp<cpp11::decay_t<int>>(nthreads)));
  END_CPP11
}
// 07_01_parallel_helpers.cpp
list cpppar_which_na_inf_df(SEXP df, int nthreads);
extern "C" SEXP _fixest_cpppar_which_na_inf_df(SEXP df, SEXP nthreads) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpppar_which_na_inf_df(cpp11::as_cpp<cpp11::decay_t<SEXP>>(df), cpp11::as_cpp<cpp11::decay_t<int>>(nthreads)));
  END_CPP11
}
// 07_01_parallel_helpers.cpp
integers cpppar_check_only_0(doubles_matrix<> x_mat, int nthreads);
extern "C" SEXP _fixest_cpppar_check_only_0(SEXP x_mat, SEXP nthreads) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpppar_check_only_0(cpp11::as_cpp<cpp11::decay_t<doubles_matrix<>>>(x_mat), cpp11::as_cpp<cpp11::decay_t<int>>(nthreads)));
  END_CPP11
}
// 07_02_parallel_math.cpp
doubles cpppar_exp(doubles x, int nthreads);
extern "C" SEXP _fixest_cpppar_exp(SEXP x, SEXP nthreads) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpppar_exp(cpp11::as_cpp<cpp11::decay_t<doubles>>(x), cpp11::as_cpp<cpp11::decay_t<int>>(nthreads)));
  END_CPP11
}
// 07_02_parallel_math.cpp
doubles cpppar_log(doubles x, int nthreads);
extern "C" SEXP _fixest_cpppar_log(SEXP x, SEXP nthreads) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpppar_log(cpp11::as_cpp<cpp11::decay_t<doubles>>(x), cpp11::as_cpp<cpp11::decay_t<int>>(nthreads)));
  END_CPP11
}
// 07_02_parallel_math.cpp
doubles cpppar_log_a_exp(int nthreads, double a, doubles mu, doubles exp_mu);
extern "C" SEXP _fixest_cpppar_log_a_exp(SEXP nthreads, SEXP a, SEXP mu, SEXP exp_mu) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpppar_log_a_exp(cpp11::as_cpp<cpp11::decay_t<int>>(nthreads), cpp11::as_cpp<cpp11::decay_t<double>>(a), cpp11::as_cpp<cpp11::decay_t<doubles>>(mu), cpp11::as_cpp<cpp11::decay_t<doubles>>(exp_mu)));
  END_CPP11
}
// 07_02_parallel_math.cpp
list cpppar_cond_means(doubles_matrix<> mat_vars, integers treat, int nthreads);
extern "C" SEXP _fixest_cpppar_cond_means(SEXP mat_vars, SEXP treat, SEXP nthreads) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpppar_cond_means(cpp11::as_cpp<cpp11::decay_t<doubles_matrix<>>>(mat_vars), cpp11::as_cpp<cpp11::decay_t<integers>>(treat), cpp11::as_cpp<cpp11::decay_t<int>>(nthreads)));
  END_CPP11
}
// 07_03_parallel_exp_family.cpp
doubles cpppar_lgamma(doubles x, int nthreads);
extern "C" SEXP _fixest_cpppar_lgamma(SEXP x, SEXP nthreads) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpppar_lgamma(cpp11::as_cpp<cpp11::decay_t<doubles>>(x), cpp11::as_cpp<cpp11::decay_t<int>>(nthreads)));
  END_CPP11
}
// 07_03_parallel_exp_family.cpp
doubles cpppar_digamma(doubles x, int nthreads);
extern "C" SEXP _fixest_cpppar_digamma(SEXP x, SEXP nthreads) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpppar_digamma(cpp11::as_cpp<cpp11::decay_t<doubles>>(x), cpp11::as_cpp<cpp11::decay_t<int>>(nthreads)));
  END_CPP11
}
// 07_03_parallel_exp_family.cpp
doubles cpppar_trigamma(doubles x, int nthreads);
extern "C" SEXP _fixest_cpppar_trigamma(SEXP x, SEXP nthreads) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpppar_trigamma(cpp11::as_cpp<cpp11::decay_t<doubles>>(x), cpp11::as_cpp<cpp11::decay_t<int>>(nthreads)));
  END_CPP11
}
// 07_03_parallel_exp_family.cpp
doubles cpppar_poisson_linkinv(doubles x, int nthreads);
extern "C" SEXP _fixest_cpppar_poisson_linkinv(SEXP x, SEXP nthreads) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpppar_poisson_linkinv(cpp11::as_cpp<cpp11::decay_t<doubles>>(x), cpp11::as_cpp<cpp11::decay_t<int>>(nthreads)));
  END_CPP11
}
// 07_03_parallel_exp_family.cpp
bool cpppar_poisson_validmu(SEXP x, int nthreads);
extern "C" SEXP _fixest_cpppar_poisson_validmu(SEXP x, SEXP nthreads) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpppar_poisson_validmu(cpp11::as_cpp<cpp11::decay_t<SEXP>>(x), cpp11::as_cpp<cpp11::decay_t<int>>(nthreads)));
  END_CPP11
}
// 07_03_parallel_exp_family.cpp
doubles cpppar_logit_linkfun(doubles x, int nthreads);
extern "C" SEXP _fixest_cpppar_logit_linkfun(SEXP x, SEXP nthreads) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpppar_logit_linkfun(cpp11::as_cpp<cpp11::decay_t<doubles>>(x), cpp11::as_cpp<cpp11::decay_t<int>>(nthreads)));
  END_CPP11
}
// 07_03_parallel_exp_family.cpp
doubles cpppar_logit_linkinv(doubles x, int nthreads);
extern "C" SEXP _fixest_cpppar_logit_linkinv(SEXP x, SEXP nthreads) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpppar_logit_linkinv(cpp11::as_cpp<cpp11::decay_t<doubles>>(x), cpp11::as_cpp<cpp11::decay_t<int>>(nthreads)));
  END_CPP11
}
// 07_03_parallel_exp_family.cpp
doubles cpppar_logit_mueta(doubles x, int nthreads);
extern "C" SEXP _fixest_cpppar_logit_mueta(SEXP x, SEXP nthreads) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpppar_logit_mueta(cpp11::as_cpp<cpp11::decay_t<doubles>>(x), cpp11::as_cpp<cpp11::decay_t<int>>(nthreads)));
  END_CPP11
}
// 07_03_parallel_exp_family.cpp
doubles cpppar_logit_devresids(doubles y, doubles mu, doubles wt, int nthreads);
extern "C" SEXP _fixest_cpppar_logit_devresids(SEXP y, SEXP mu, SEXP wt, SEXP nthreads) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpppar_logit_devresids(cpp11::as_cpp<cpp11::decay_t<doubles>>(y), cpp11::as_cpp<cpp11::decay_t<doubles>>(mu), cpp11::as_cpp<cpp11::decay_t<doubles>>(wt), cpp11::as_cpp<cpp11::decay_t<int>>(nthreads)));
  END_CPP11
}
// 07_04_parallel_linalg.cpp
doubles cpppar_xwy(doubles_matrix<> X, doubles y, doubles w, int nthreads);
extern "C" SEXP _fixest_cpppar_xwy(SEXP X, SEXP y, SEXP w, SEXP nthreads) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpppar_xwy(cpp11::as_cpp<cpp11::decay_t<doubles_matrix<>>>(X), cpp11::as_cpp<cpp11::decay_t<doubles>>(y), cpp11::as_cpp<cpp11::decay_t<doubles>>(w), cpp11::as_cpp<cpp11::decay_t<int>>(nthreads)));
  END_CPP11
}
// 07_04_parallel_linalg.cpp
doubles cpppar_xbeta(doubles_matrix<> X, doubles beta, int nthreads);
extern "C" SEXP _fixest_cpppar_xbeta(SEXP X, SEXP beta, SEXP nthreads) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpppar_xbeta(cpp11::as_cpp<cpp11::decay_t<doubles_matrix<>>>(X), cpp11::as_cpp<cpp11::decay_t<doubles>>(beta), cpp11::as_cpp<cpp11::decay_t<int>>(nthreads)));
  END_CPP11
}
// 07_04_parallel_linalg.cpp
doubles_matrix<> cpppar_matprod(doubles_matrix<> x, doubles_matrix<> y, int nthreads);
extern "C" SEXP _fixest_cpppar_matprod(SEXP x, SEXP y, SEXP nthreads) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpppar_matprod(cpp11::as_cpp<cpp11::decay_t<doubles_matrix<>>>(x), cpp11::as_cpp<cpp11::decay_t<doubles_matrix<>>>(y), cpp11::as_cpp<cpp11::decay_t<int>>(nthreads)));
  END_CPP11
}
// 08_01_strings_helpers.cpp
strings cpp_colon_to_star(SEXP Rstr);
extern "C" SEXP _fixest_cpp_colon_to_star(SEXP Rstr) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_colon_to_star(cpp11::as_cpp<cpp11::decay_t<SEXP>>(Rstr)));
  END_CPP11
}
// 09_02_vcov_dwdk.cpp
doubles_matrix<> cpp_newey_west(doubles_matrix<> S, doubles w, int nthreads);
extern "C" SEXP _fixest_cpp_newey_west(SEXP S, SEXP w, SEXP nthreads) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_newey_west(cpp11::as_cpp<cpp11::decay_t<doubles_matrix<>>>(S), cpp11::as_cpp<cpp11::decay_t<doubles>>(w), cpp11::as_cpp<cpp11::decay_t<int>>(nthreads)));
  END_CPP11
}
// 09_02_vcov_dwdk.cpp
doubles_matrix<> cpp_newey_west_panel(doubles_matrix<> S, doubles w, integers unit, int G, integers time, int T, int nthreads);
extern "C" SEXP _fixest_cpp_newey_west_panel(SEXP S, SEXP w, SEXP unit, SEXP G, SEXP time, SEXP T, SEXP nthreads) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_newey_west_panel(cpp11::as_cpp<cpp11::decay_t<doubles_matrix<>>>(S), cpp11::as_cpp<cpp11::decay_t<doubles>>(w), cpp11::as_cpp<cpp11::decay_t<integers>>(unit), cpp11::as_cpp<cpp11::decay_t<int>>(G), cpp11::as_cpp<cpp11::decay_t<integers>>(time), cpp11::as_cpp<cpp11::decay_t<int>>(T), cpp11::as_cpp<cpp11::decay_t<int>>(nthreads)));
  END_CPP11
}
// 09_02_vcov_dwdk.cpp
doubles_matrix<> cpp_driscoll_kraay(doubles_matrix<> S, doubles w, integers time, int T, int nthreads);
extern "C" SEXP _fixest_cpp_driscoll_kraay(SEXP S, SEXP w, SEXP time, SEXP T, SEXP nthreads) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_driscoll_kraay(cpp11::as_cpp<cpp11::decay_t<doubles_matrix<>>>(S), cpp11::as_cpp<cpp11::decay_t<doubles>>(w), cpp11::as_cpp<cpp11::decay_t<integers>>(time), cpp11::as_cpp<cpp11::decay_t<int>>(T), cpp11::as_cpp<cpp11::decay_t<int>>(nthreads)));
  END_CPP11
}
// 09_03_vcov_conley.cpp
doubles_matrix<> cpp_vcov_conley(doubles_matrix<> S, doubles lon_rad, doubles lat_rad, const int distance, const double cutoff, int nthreads);
extern "C" SEXP _fixest_cpp_vcov_conley(SEXP S, SEXP lon_rad, SEXP lat_rad, SEXP distance, SEXP cutoff, SEXP nthreads) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_vcov_conley(cpp11::as_cpp<cpp11::decay_t<doubles_matrix<>>>(S), cpp11::as_cpp<cpp11::decay_t<doubles>>(lon_rad), cpp11::as_cpp<cpp11::decay_t<doubles>>(lat_rad), cpp11::as_cpp<cpp11::decay_t<const int>>(distance), cpp11::as_cpp<cpp11::decay_t<const double>>(cutoff), cpp11::as_cpp<cpp11::decay_t<int>>(nthreads)));
  END_CPP11
}

extern "C" {
static const R_CallMethodDef CallEntries[] = {
    {"_fixest_compute_cluster_coef_r",        (DL_FUNC) &_fixest_compute_cluster_coef_r,        12},
    {"_fixest_cpp_add_commas",                (DL_FUNC) &_fixest_cpp_add_commas,                 3},
    {"_fixest_cpp_any_na_null",               (DL_FUNC) &_fixest_cpp_any_na_null,                1},
    {"_fixest_cpp_check_nested",              (DL_FUNC) &_fixest_cpp_check_nested,               4},
    {"_fixest_cpp_cholesky",                  (DL_FUNC) &_fixest_cpp_cholesky,                   3},
    {"_fixest_cpp_colon_to_star",             (DL_FUNC) &_fixest_cpp_colon_to_star,              1},
    {"_fixest_cpp_combine_clusters",          (DL_FUNC) &_fixest_cpp_combine_clusters,           2},
    {"_fixest_cpp_constant_dum",              (DL_FUNC) &_fixest_cpp_constant_dum,               4},
    {"_fixest_cpp_conv_acc_gau_2",            (DL_FUNC) &_fixest_cpp_conv_acc_gau_2,            13},
    {"_fixest_cpp_conv_acc_gnl",              (DL_FUNC) &_fixest_cpp_conv_acc_gnl,              14},
    {"_fixest_cpp_conv_acc_poi_2",            (DL_FUNC) &_fixest_cpp_conv_acc_poi_2,            11},
    {"_fixest_cpp_conv_seq_gau_2",            (DL_FUNC) &_fixest_cpp_conv_seq_gau_2,            13},
    {"_fixest_cpp_conv_seq_gnl",              (DL_FUNC) &_fixest_cpp_conv_seq_gnl,              14},
    {"_fixest_cpp_conv_seq_poi_2",            (DL_FUNC) &_fixest_cpp_conv_seq_poi_2,            11},
    {"_fixest_cpp_cut",                       (DL_FUNC) &_fixest_cpp_cut,                        3},
    {"_fixest_cpp_demean",                    (DL_FUNC) &_fixest_cpp_demean,                    13},
    {"_fixest_cpp_derivconv_acc_2",           (DL_FUNC) &_fixest_cpp_derivconv_acc_2,           12},
    {"_fixest_cpp_derivconv_acc_gnl",         (DL_FUNC) &_fixest_cpp_derivconv_acc_gnl,          8},
    {"_fixest_cpp_derivconv_seq_2",           (DL_FUNC) &_fixest_cpp_derivconv_seq_2,           12},
    {"_fixest_cpp_derivconv_seq_gnl",         (DL_FUNC) &_fixest_cpp_derivconv_seq_gnl,          8},
    {"_fixest_cpp_diag_XUtX",                 (DL_FUNC) &_fixest_cpp_diag_XUtX,                  2},
    {"_fixest_cpp_driscoll_kraay",            (DL_FUNC) &_fixest_cpp_driscoll_kraay,             5},
    {"_fixest_cpp_dsb",                       (DL_FUNC) &_fixest_cpp_dsb,                        1},
    {"_fixest_cpp_dsb_full_string",           (DL_FUNC) &_fixest_cpp_dsb_full_string,            1},
    {"_fixest_cpp_dsb_if_extract",            (DL_FUNC) &_fixest_cpp_dsb_if_extract,             1},
    {"_fixest_cpp_factor_matrix",             (DL_FUNC) &_fixest_cpp_factor_matrix,              5},
    {"_fixest_cpp_find_duplicates",           (DL_FUNC) &_fixest_cpp_find_duplicates,            2},
    {"_fixest_cpp_find_never_always_treated", (DL_FUNC) &_fixest_cpp_find_never_always_treated,  2},
    {"_fixest_cpp_fixed_cost_gaussian",       (DL_FUNC) &_fixest_cpp_fixed_cost_gaussian,        7},
    {"_fixest_cpp_get_first_item",            (DL_FUNC) &_fixest_cpp_get_first_item,             2},
    {"_fixest_cpp_hash_string",               (DL_FUNC) &_fixest_cpp_hash_string,                1},
    {"_fixest_cpp_isConstant",                (DL_FUNC) &_fixest_cpp_isConstant,                 1},
    {"_fixest_cpp_is_int",                    (DL_FUNC) &_fixest_cpp_is_int,                     1},
    {"_fixest_cpp_iv_product_completion",     (DL_FUNC) &_fixest_cpp_iv_product_completion,      7},
    {"_fixest_cpp_iv_products",               (DL_FUNC) &_fixest_cpp_iv_products,                6},
    {"_fixest_cpp_iv_resid",                  (DL_FUNC) &_fixest_cpp_iv_resid,                   5},
    {"_fixest_cpp_lag_obs",                   (DL_FUNC) &_fixest_cpp_lag_obs,                    3},
    {"_fixest_cpp_lgamma",                    (DL_FUNC) &_fixest_cpp_lgamma,                     1},
    {"_fixest_cpp_log_a_exp",                 (DL_FUNC) &_fixest_cpp_log_a_exp,                  3},
    {"_fixest_cpp_mat_reconstruct",           (DL_FUNC) &_fixest_cpp_mat_reconstruct,            2},
    {"_fixest_cpp_newey_west",                (DL_FUNC) &_fixest_cpp_newey_west,                 3},
    {"_fixest_cpp_newey_west_panel",          (DL_FUNC) &_fixest_cpp_newey_west_panel,           7},
    {"_fixest_cpp_partialDerivative_other",   (DL_FUNC) &_fixest_cpp_partialDerivative_other,    9},
    {"_fixest_cpp_paste_conditional",         (DL_FUNC) &_fixest_cpp_paste_conditional,          3},
    {"_fixest_cpp_pgcd",                      (DL_FUNC) &_fixest_cpp_pgcd,                       1},
    {"_fixest_cpp_quf_gnl",                   (DL_FUNC) &_fixest_cpp_quf_gnl,                    1},
    {"_fixest_cpp_sparse_products",           (DL_FUNC) &_fixest_cpp_sparse_products,            5},
    {"_fixest_cpp_ssq",                       (DL_FUNC) &_fixest_cpp_ssq,                        2},
    {"_fixest_cpp_ssr_null",                  (DL_FUNC) &_fixest_cpp_ssr_null,                   2},
    {"_fixest_cpp_table",                     (DL_FUNC) &_fixest_cpp_table,                      2},
    {"_fixest_cpp_tapply_sum",                (DL_FUNC) &_fixest_cpp_tapply_sum,                 3},
    {"_fixest_cpp_tapply_vsum",               (DL_FUNC) &_fixest_cpp_tapply_vsum,                3},
    {"_fixest_cpp_vcov_conley",               (DL_FUNC) &_fixest_cpp_vcov_conley,                6},
    {"_fixest_cpp_which_na_inf",              (DL_FUNC) &_fixest_cpp_which_na_inf,               2},
    {"_fixest_cpppar_check_only_0",           (DL_FUNC) &_fixest_cpppar_check_only_0,            2},
    {"_fixest_cpppar_cond_means",             (DL_FUNC) &_fixest_cpppar_cond_means,              3},
    {"_fixest_cpppar_crossprod",              (DL_FUNC) &_fixest_cpppar_crossprod,               3},
    {"_fixest_cpppar_digamma",                (DL_FUNC) &_fixest_cpppar_digamma,                 2},
    {"_fixest_cpppar_exp",                    (DL_FUNC) &_fixest_cpppar_exp,                     2},
    {"_fixest_cpppar_lgamma",                 (DL_FUNC) &_fixest_cpppar_lgamma,                  2},
    {"_fixest_cpppar_log",                    (DL_FUNC) &_fixest_cpppar_log,                     2},
    {"_fixest_cpppar_log_a_exp",              (DL_FUNC) &_fixest_cpppar_log_a_exp,               4},
    {"_fixest_cpppar_logit_devresids",        (DL_FUNC) &_fixest_cpppar_logit_devresids,         4},
    {"_fixest_cpppar_logit_linkfun",          (DL_FUNC) &_fixest_cpppar_logit_linkfun,           2},
    {"_fixest_cpppar_logit_linkinv",          (DL_FUNC) &_fixest_cpppar_logit_linkinv,           2},
    {"_fixest_cpppar_logit_mueta",            (DL_FUNC) &_fixest_cpppar_logit_mueta,             2},
    {"_fixest_cpppar_matprod",                (DL_FUNC) &_fixest_cpppar_matprod,                 3},
    {"_fixest_cpppar_poisson_linkinv",        (DL_FUNC) &_fixest_cpppar_poisson_linkinv,         2},
    {"_fixest_cpppar_poisson_validmu",        (DL_FUNC) &_fixest_cpppar_poisson_validmu,         2},
    {"_fixest_cpppar_quf_table_sum",          (DL_FUNC) &_fixest_cpppar_quf_table_sum,          11},
    {"_fixest_cpppar_trigamma",               (DL_FUNC) &_fixest_cpppar_trigamma,                2},
    {"_fixest_cpppar_which_na_inf_df",        (DL_FUNC) &_fixest_cpppar_which_na_inf_df,         2},
    {"_fixest_cpppar_which_na_inf_mat",       (DL_FUNC) &_fixest_cpppar_which_na_inf_mat,        2},
    {"_fixest_cpppar_which_na_inf_vec",       (DL_FUNC) &_fixest_cpppar_which_na_inf_vec,        2},
    {"_fixest_cpppar_xbeta",                  (DL_FUNC) &_fixest_cpppar_xbeta,                   3},
    {"_fixest_cpppar_xwy",                    (DL_FUNC) &_fixest_cpppar_xwy,                     4},
    {"_fixest_get_n_cells",                   (DL_FUNC) &_fixest_get_n_cells,                    2},
    {"_fixest_update_deriv_single",           (DL_FUNC) &_fixest_update_deriv_single,            5},
    {"_fixest_update_mu_single_cluster",      (DL_FUNC) &_fixest_update_mu_single_cluster,      12},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_fixest(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
