==19698== Memcheck, a memory error detector
==19698== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==19698== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==19698== Command: /usr/lib/R/bin/exec/R -f dev/03_cpp11_incorrect_repeated_result.R
==19698== 

R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

Loading required package: utils
Tracing function "install.packages" in package "utils"
Loading required package: usethis
> input <- readRDS("dev/input.rds")
> 
> # explicitly convert to the right data types
> 
> Q <- as.integer(input$Q)
> 
> N <- as.integer(input$N)
> 
> S <- as.double(input$S)
> 
> dumMat <- input$dumMat
> storage.mode(dumMat) <- "integer"
> 
> nbCluster <- as.integer(input$nbCluster)
> 
> orderCluster <- input$orderCluster
> storage.mode(orderCluster) <- "integer"
> 
> # check the data types
> print(paste("Q", class(Q)))
[1] "Q integer"
> print(paste("N", class(N)))
[1] "N integer"
> print(paste("S", class(S)))
[1] "S numeric"
> print(paste("dumMat", class(dumMat)))
[1] "dumMat matrix" "dumMat array" 
> print(paste("nbCluster", class(nbCluster)))
[1] "nbCluster integer"
> print(paste("orderCluster", class(orderCluster)))
[1] "orderCluster matrix" "orderCluster array" 
> 
> # check dimensions
> print(paste("Q", length(Q)))
[1] "Q 1"
> print(paste("N", length(N)))
[1] "N 1"
> print(paste("S", length(S)))
[1] "S 38325"
> print(paste("dumMat", paste("rows", dim(dumMat)[1], "cols", dim(dumMat)[2])))
[1] "dumMat rows 38325 cols 4"
> print(paste("nbCluster", length(nbCluster)))
[1] "nbCluster 4"
> print(paste("orderCluster", paste("rows", dim(orderCluster)[1], "cols", dim(orderCluster)[2])))
[1] "orderCluster rows 38325 cols 4"
> 
> # cpp11::cpp_source("dev/00_cpp11_get_fe_gnl.cpp")
> cpp11::cpp_source("dev/00_cpp11_get_fe_gnl_2.cpp")
> 
> cpp_get_fe_gnl_(Q, N, S, dumMat, nbCluster, orderCluster)
[[1]]
 [1] 23.25143 22.44476 24.43460 20.23023 24.32840 23.19499 23.08105 23.75072
 [9] 24.67546 21.64615 24.96690 24.70769 23.56068 22.50802 23.44093

[[2]]
 [1] 3.570083 2.552345 3.230585 0.000000 4.217882 2.588554 3.143755 4.064073
 [9] 4.168774 2.817644 4.043327 4.322875 2.695877 2.435895 2.451105

[[3]]
 [1]  0.00000000  1.41436908  0.65624654  1.44923309 -1.52073341  0.24061915
 [7]  0.90627290  0.99818202 -0.43707295  0.38013238 -0.69887170 -0.09549963
[13] -1.94791717 -4.43050543  0.69615767  0.33033306  0.07365566  0.49554792
[19]  0.94009439  0.80754214

[[4]]
 [1] 0.000000000 0.069122284 0.005225473 0.073308208 0.163013386 0.192605170
 [7] 0.230629376 0.242605404 0.282800683 0.310325692

[[5]]
[1] 0 1 1 1

> 
==19698== 
==19698== HEAP SUMMARY:
==19698==     in use at exit: 99,389,917 bytes in 20,271 blocks
==19698==   total heap usage: 81,103 allocs, 60,832 frees, 192,449,400 bytes allocated
==19698== 
==19698== LEAK SUMMARY:
==19698==    definitely lost: 0 bytes in 0 blocks
==19698==    indirectly lost: 0 bytes in 0 blocks
==19698==      possibly lost: 0 bytes in 0 blocks
==19698==    still reachable: 99,389,917 bytes in 20,271 blocks
==19698==                       of which reachable via heuristic:
==19698==                         newarray           : 4,264 bytes in 1 blocks
==19698==         suppressed: 0 bytes in 0 blocks
==19698== Rerun with --leak-check=full to see details of leaked memory
==19698== 
==19698== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
